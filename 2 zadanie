1.0 nomer

def dist_beetween_2dots(x1,y1,x2,y2) -> float:
    return (((x2-x1)**2) + (y2-y1)**2)**0.5
    
x1 = float(input("x1 = "))
y1 = float(input("y1 = "))
x2 = float(input("x2 = "))
y2 = float(input("y2 = "))

print(f"Расстояние между точками равно {dist_beetween_2dots(x1,y1,x2,y2)}")


1.1 nomer

def dist_beetween_2dots(x1,x2) -> float:
    return ((x2-x1)**2)**0.5

def dist_of_3points() -> float:
    points = []
    distance_of_3 = []
    for i in range(6):
        points.append(float(input("Введите точку: ")))
    dist1 = dist_beetween_2dots(points[0], points[1])
    dist2 = dist_beetween_2dots(points[2], points[3])
    dist3 = dist_beetween_2dots(points[4], points[5])
    distance_of_3.append(dist1)
    distance_of_3.append(dist2)
    distance_of_3.append(dist3)
    return distance_of_3
    
print(dist_of_3points())


1.2 nomer

def dist_beetween_2dots(x1,x2) -> float:
    return ((x2-x1)**2)**0.5

def dist_of_3points() -> float:
    points = []
    distance_of_3 = []
    for i in range(6):
        points.append(float(input("Введите точку: ")))
    dist1 = dist_beetween_2dots(points[0], points[1])
    dist2 = dist_beetween_2dots(points[2], points[3])
    dist3 = dist_beetween_2dots(points[4], points[5]))
    distance_of_3.append(dist1)
    distance_of_3.append(dist2)
    distance_of_3.append(dist3)
    return distance_of_3

def ploshad_triag(sizes) -> float:
    if sizes[0] + sizes[1] >= sizes[2]  and sizes[1] + sizes[2] >= sizes[0] and sizes[0] + sizes[2] >= sizes[1]:
        P = (sizes[0] + sizes[1] + sizes[2])/2
        S = (P*(P-sizes[0])*(P-sizes[1])*(P-sizes[2]))**0.5
        return S 
    else:
        return -1
 
print(ploshad_triag(dist_of_3points()))



1.3 nomer

def dist_beetween_2dots(x1,x2) -> float:
    return ((x2-x1)**2)**0.5

def three_sides() -> float:
    points = []
    triag = []
    for i in range(6):
        points.append(float(input("Введите точку: ")))
    dist1 = dist_beetween_2dots(points[0], points[1])
    dist2 = dist_beetween_2dots(points[2], points[3])
    dist3 = dist_beetween_2dots(points[4], points[5])
    triag.append(dist1)
    triag.append(dist2)
    triag.append(dist3)
    return triag
    
def ploshad_triag(sizes) -> float:
    if sizes[0] + sizes[1] >= sizes[2]  and sizes[1] + sizes[2] >= sizes[0] and sizes[0] + sizes[2] >= sizes[1]:
        P = (sizes[0] + sizes[1] + sizes[2])/2
        S = (P*(P-sizes[0])*(P-sizes[1])*(P-sizes[2]))**0.5
        return S 
    else:
        return False


vse_storoni = []
for i in range(5):
    vse_storoni.append(three_sides())
print(vse_storoni)


nomer 1.4


def dist_beetween_2dots(x1,x2) -> float:
    return ((x2-x1)**2)**0.5

def three_sides() -> float:
    points = []
    triag = []
    for i in range(6):
        points.append(float(input("Введите точку: ")))
    dist1 = dist_beetween_2dots(points[0], points[1])
    dist2 = dist_beetween_2dots(points[2], points[3])
    dist3 = dist_beetween_2dots(points[4], points[5])
    triag.append(dist1)
    triag.append(dist2)
    triag.append(dist3)
    return triag
    
def ploshad_triag(sizes) -> float:
    if sizes[0] + sizes[1] >= sizes[2]  and sizes[1] + sizes[2] >= sizes[0] and sizes[0] + sizes[2] >= sizes[1]:
        P = (sizes[0] + sizes[1] + sizes[2])/2
        S = (P*(P-sizes[0])*(P-sizes[1])*(P-sizes[2]))**0.5
        return S 
    else:
        return False


vse_storoni = []
for i in range(5):
    vse_storoni.append(three_sides())
print(vse_storoni)

for i in range(len(vse_storoni)):
    print(f"{ploshad_triag(vse_storoni[i])=}")

